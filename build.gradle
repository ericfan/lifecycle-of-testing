buildscript {
	ext {
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.sample'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'org.springframework', name: 'spring-jdbc', version: '5.0.4.RELEASE'
	compile group: 'org.webjars', name: 'webix', version: '4.4.0'
	compile group: 'org.apache.derby', name: 'derby', version: '10.13.1.1'

	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.seleniumhq.selenium:selenium-java:3.9.1')
	testCompile group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: '2.1.6'
}

task loadTest(type: JavaExec) {
	dependsOn testClasses
	description = "Load Test With Gatling"
	group = "Load Test"
	classpath = sourceSets.test.runtimeClasspath
	jvmArgs = [
			"-Dgatling.core.directory.binaries=${sourceSets.test.output.classesDir.toString()}",
			"-Dio.netty.noUnsafe=true"
	]
	main = "io.gatling.app.Gatling"
	args = [
			"--simulation", "GetPersonGatlingTest",
			"--results-folder", "${buildDir}/gatling-results"
	]
}
